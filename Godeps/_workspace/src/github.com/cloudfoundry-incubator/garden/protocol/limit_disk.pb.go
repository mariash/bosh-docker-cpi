// Code generated by protoc-gen-gogo.
// source: limit_disk.proto
// DO NOT EDIT!

package warden

import proto "code.google.com/p/gogoprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type LimitDiskRequest struct {
	Handle           *string `protobuf:"bytes,1,req,name=handle" json:"handle,omitempty"`
	BlockSoft        *uint64 `protobuf:"varint,12,opt,name=block_soft" json:"block_soft,omitempty"`
	BlockHard        *uint64 `protobuf:"varint,13,opt,name=block_hard" json:"block_hard,omitempty"`
	InodeSoft        *uint64 `protobuf:"varint,22,opt,name=inode_soft" json:"inode_soft,omitempty"`
	InodeHard        *uint64 `protobuf:"varint,23,opt,name=inode_hard" json:"inode_hard,omitempty"`
	ByteSoft         *uint64 `protobuf:"varint,32,opt,name=byte_soft" json:"byte_soft,omitempty"`
	ByteHard         *uint64 `protobuf:"varint,33,opt,name=byte_hard" json:"byte_hard,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LimitDiskRequest) Reset()         { *m = LimitDiskRequest{} }
func (m *LimitDiskRequest) String() string { return proto.CompactTextString(m) }
func (*LimitDiskRequest) ProtoMessage()    {}

func (m *LimitDiskRequest) GetHandle() string {
	if m != nil && m.Handle != nil {
		return *m.Handle
	}
	return ""
}

func (m *LimitDiskRequest) GetBlockSoft() uint64 {
	if m != nil && m.BlockSoft != nil {
		return *m.BlockSoft
	}
	return 0
}

func (m *LimitDiskRequest) GetBlockHard() uint64 {
	if m != nil && m.BlockHard != nil {
		return *m.BlockHard
	}
	return 0
}

func (m *LimitDiskRequest) GetInodeSoft() uint64 {
	if m != nil && m.InodeSoft != nil {
		return *m.InodeSoft
	}
	return 0
}

func (m *LimitDiskRequest) GetInodeHard() uint64 {
	if m != nil && m.InodeHard != nil {
		return *m.InodeHard
	}
	return 0
}

func (m *LimitDiskRequest) GetByteSoft() uint64 {
	if m != nil && m.ByteSoft != nil {
		return *m.ByteSoft
	}
	return 0
}

func (m *LimitDiskRequest) GetByteHard() uint64 {
	if m != nil && m.ByteHard != nil {
		return *m.ByteHard
	}
	return 0
}

type LimitDiskResponse struct {
	BlockSoft        *uint64 `protobuf:"varint,12,opt,name=block_soft" json:"block_soft,omitempty"`
	BlockHard        *uint64 `protobuf:"varint,13,opt,name=block_hard" json:"block_hard,omitempty"`
	InodeSoft        *uint64 `protobuf:"varint,22,opt,name=inode_soft" json:"inode_soft,omitempty"`
	InodeHard        *uint64 `protobuf:"varint,23,opt,name=inode_hard" json:"inode_hard,omitempty"`
	ByteSoft         *uint64 `protobuf:"varint,32,opt,name=byte_soft" json:"byte_soft,omitempty"`
	ByteHard         *uint64 `protobuf:"varint,33,opt,name=byte_hard" json:"byte_hard,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LimitDiskResponse) Reset()         { *m = LimitDiskResponse{} }
func (m *LimitDiskResponse) String() string { return proto.CompactTextString(m) }
func (*LimitDiskResponse) ProtoMessage()    {}

func (m *LimitDiskResponse) GetBlockSoft() uint64 {
	if m != nil && m.BlockSoft != nil {
		return *m.BlockSoft
	}
	return 0
}

func (m *LimitDiskResponse) GetBlockHard() uint64 {
	if m != nil && m.BlockHard != nil {
		return *m.BlockHard
	}
	return 0
}

func (m *LimitDiskResponse) GetInodeSoft() uint64 {
	if m != nil && m.InodeSoft != nil {
		return *m.InodeSoft
	}
	return 0
}

func (m *LimitDiskResponse) GetInodeHard() uint64 {
	if m != nil && m.InodeHard != nil {
		return *m.InodeHard
	}
	return 0
}

func (m *LimitDiskResponse) GetByteSoft() uint64 {
	if m != nil && m.ByteSoft != nil {
		return *m.ByteSoft
	}
	return 0
}

func (m *LimitDiskResponse) GetByteHard() uint64 {
	if m != nil && m.ByteHard != nil {
		return *m.ByteHard
	}
	return 0
}

func init() {
}
